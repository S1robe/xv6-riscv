

Tiebreaks ----------------------
	If two or more processes are in conention for a core, the current priority based scheduling algorithm
	picks the processes that arrived first (FCFS). We see this in Picture 1; every time there is a 
	collection of processes with the same priority, the one with the lowest pid, and therefore came first,
	always finishes first. This concept is slightly different for multi-core, as groups of 3 will be selected.
	These three will always be the 3 most recent, but may not finish in order as the cores run independently.


Round Robin Priority -----------
	It is possible to make a priority based round robin scheduler without changing the PCB structure.
	This can be done by making a copy of the current PCB, including only the runnable processes, and
	then sorting based on pid. We choose to sort by PID because it is directly related to when the process
	entered the system, and therefore does not change between scans for new processes. It also is reliable
	in that the PID does not change relative to a processes placement in the process table.
	
	We must also have an array that tracks who we have ran already. This array will contain the PID's as well.
	This array will never have processes of difference priority because we only schedule one process
	after which we must scan again to preserve priority and fairness. This array is only updated if we 
	have a new process that we havent run before. After that point it is simply checked. Should a process 
	terminate it will be removed from this array immidiately after losing the core. 

	With these, should a new process enter the system, it will be scanned for, put into its respective priority array.
	Sorted together with the others by PID, which preserves order and then selected in that same order.


Write-Up -----------------------
	With the change to an inverted priority based scheduler, we will be able to better control what processes
	run first by increasing their priority (decreasing the priority value). However, this comes at the cost of
	possible starvation for lower priority processes, and it also does not guarantee that our desired process
	runs first compared to others of the same priority. Included is two executions; Execution 1 is running with 
	three cores, Execution 2 is running with one core. This is to demonstrate that processes are selected in 
	groups of three and will finish in groups of 3 which have the highest priority.

	We expect the new scheduler to run slower than the previous due to the increased complexity of calculation
	during each scheduling decision. However, we can expect higher priority (lower value) processes to 
	complete before their lower priority (higher value) counter parts. Specifically, all C, then all A,
	then all B, then all D, then all F, in that order, every time. Since xv6 runs on 3 cores naturally, 
	the completion of any combination of mixed priority will complete roughly at the same time. For example,
	during execution 1, we see that Process <> finished with priority <>, two others also finished with it, that are
	of higher priority. This is because they all ran indepenently on separate cores. We can remove this possibility by 
	restricting to one core as demonstrated by execution 2.
